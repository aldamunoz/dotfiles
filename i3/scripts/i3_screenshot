#!/usr/bin/env bash
##
## Improved Screenshot Script

# Set variables
time=$(date +%Y-%m-%d-%H-%M-%S)
geometry=$(xrandr | grep 'current' | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current')

# Fallback to $HOME/Pictures/Screenshots if XDG fails
dir="$(xdg-user-dir PICTURES 2>/dev/null || echo "$HOME/Pictures")/Screenshots"
file="Screenshot_${time}_${geometry}.png"

# Ensure directory exists
mkdir -p "$dir"

# Log where we're saving
echo "Saving screenshot to: $dir/$file"

# Notify and view screenshot
notify_view() {
  notify_cmd_shot='dunstify -u low -h string:x-dunst-stack-tag:obscreenshot -i /usr/share/icons/dunst/picture.png'
  ${notify_cmd_shot} "Copied to clipboard."
  paplay /usr/share/sounds/freedesktop/stereo/screen-capture.oga &>/dev/null &
  viewnior "${dir}/${file}"
  if [[ -e "${dir}/${file}" ]]; then
    ${notify_cmd_shot} "Screenshot Saved."
  else
    ${notify_cmd_shot} "Screenshot Deleted."
  fi
}

# Copy screenshot to clipboard
copy_shot() {
  tee "${dir}/${file}" | xclip -selection clipboard -t image/png
}

# Countdown function
countdown() {
  for sec in $(seq $1 -1 1); do
    dunstify -t 1000 -h string:x-dunst-stack-tag:screenshottimer -i /usr/share/icons/dunst/timer.png "Taking shot in : $sec"
    sleep 1
  done
}

# Screenshot functions
shotnow() {
  maim -u -f png | copy_shot
  notify_view
}

shot5() {
  countdown '5'
  sleep 1 && maim -u -f png | copy_shot
  notify_view
}

shot10() {
  countdown '10'
  sleep 1 && maim -u -f png | copy_shot
  notify_view
}

shotwin() {
  maim -u -f png -i $(xdotool getactivewindow) | copy_shot
  notify_view
}

shotarea() {
  maim -u -f png -s -b 2 -c 0.35,0.55,0.85,0.25 -l | copy_shot
  notify_view
}

# Execute appropriate command
case "$1" in
--now) shotnow ;;
--in5) shot5 ;;
--in10) shot10 ;;
--win) shotwin ;;
--area) shotarea ;;
*) echo -e "Available Options : --now --in5 --in10 --win --area" ;;
esac

exit 0
